<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY I-D.ietf-dots-requirements SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dots-requirements.xml">
<!ENTITY I-D.ietf-dots-use-cases SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dots-use-cases.xml">
<!ENTITY RFC0768 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC0793 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml">
<!ENTITY RFC1035 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2782 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY RFC4271 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4271.xml">
<!ENTITY RFC4732 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
<!ENTITY RFC4786 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4786.xml">
<!ENTITY RFC5246 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC6347 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6347.xml">
<!ENTITY RFC6763 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6763.xml">
<!ENTITY RFC7092 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7092.xml">
<!ENTITY RFC7094 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7094.xml">
<!ENTITY RFC6724 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6724.xml">
<!ENTITY RFC4732 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4732.xml">
<!ENTITY RFC3582 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3582.xml">
<!ENTITY RFC4116 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4116.xml">
<!ENTITY RFC8043 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.8043.xml">
<!ENTITY RFC7556 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7556.xml">
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc docmapping="yes"?>

<rfc docName="draft-ietf-dots-architecture-04" category="info">

  <front>
    <title abbrev="DOTS Architecture">Distributed-Denial-of-Service Open Threat Signaling (DOTS) Architecture</title>

    <author initials="A." surname="Mortensen" fullname="Andrew Mortensen">
      <organization>Arbor Networks</organization>
      <address>
        <postal>
          <street>2727 S. State St</street>
          <city>Ann Arbor, MI</city>
          <code>48104</code>
          <country>United States</country>
        </postal>
        <email>amortensen@arbor.net</email>
      </address>
    </author>
    <author initials="F." surname="Andreasen" fullname="Flemming Andreasen">
      <organization>Cisco</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <country>United States</country>
        </postal>
        <email>fandreas@cisco.com</email>
      </address>
    </author>
    <author initials="T." surname="Reddy" fullname="Tirumaleswar Reddy">
      <organization>McAfee, Inc.</organization>
      <address>
        <postal>
          <street>Embassy Golf Link Business Park</street>
          <city>Bangalore, Karnataka</city>
          <code>560071</code>
          <country>India</country>
        </postal>
        <email>tireddy@cisco.com</email>
      </address>
    </author>
    <author initials="C." surname="Gray" fullname="Christopher Gray">
      <organization>Comcast</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <country>United States</country>
        </postal>
        <email>Christopher_Gray3@cable.comcast.com</email>
      </address>
    </author>
    <author initials="R." surname="Compton" fullname="Rich Compton">
      <organization>Charter</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
        </postal>
        <email>Rich.Compton@charter.com</email>
      </address>
    </author>
    <author initials="N." surname="Teague" fullname="Nik Teague">
      <organization>Verisign</organization>
      <address>
        <postal>
          <street></street>
          <city></city>
          <code></code>
          <country>United States</country>
        </postal>
        <email>nteague@verisign.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    <area>Security</area>
    <workgroup>DOTS</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes an architecture for establishing and maintaining
Distributed Denial of Service (DDoS) Open Threat Signaling (DOTS) within and
between domains. The document does not specify protocols or protocol
extensions, instead focusing on defining architectural relationships, components
and concepts used in a DOTS deployment.</t>



    </abstract>


  </front>

  <middle>


<section anchor="context-and-motivation" title="Context and Motivation">

<t>Signaling the need for help defending against an active distributed denial
of service (DDoS) attack requires a common understanding of mechanisms and
roles among the parties coordinating defensive response. The signaling
layer and supplementary messaging is the focus of DDoS Open Threat Signaling
(DOTS). DOTS defines a method of coordinating defensive measures among willing
peers to mitigate attacks quickly and efficiently, enabling hybrid attack
responses coordinated locally at or near the target of an active attack, or
anywhere in-path between attack sources and target. Sample DOTS use cases
are elaborated in <xref target="I-D.ietf-dots-use-cases"></xref>.</t>

<t>This document describes an architecture used in establishing, maintaining or
terminating a DOTS relationship within a domain or between domains.</t>

<section anchor="terminology" title="Terminology">

<section anchor="key-words" title="Key Words">

<t>The key words &ldquo;MUST&rdquo;, &ldquo;MUST NOT&rdquo;, &ldquo;REQUIRED&rdquo;, &ldquo;SHALL&rdquo;, &ldquo;SHALL NOT&rdquo;,
&ldquo;SHOULD&rdquo;, &ldquo;SHOULD NOT&rdquo;, &ldquo;RECOMMENDED&rdquo;, &ldquo;MAY&rdquo;, and &ldquo;OPTIONAL&rdquo; in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="definition-of-terms" title="Definition of Terms">

<t>This document uses the terms defined in <xref target="I-D.ietf-dots-requirements"></xref>.</t>

</section>
</section>
<section anchor="scope" title="Scope">

<t>In this architecture, DOTS clients and servers communicate using DOTS signaling.
As a result of signals from a DOTS client, the DOTS server may modify the
forwarding path of traffic destined for the attack target(s), for example by
diverting traffic to a mitigator or pool of mitigators, where policy may be
applied to distinguish and discard attack traffic. Any such policy is
deployment-specific.</t>

<t>The DOTS architecture presented here is applicable across network administrative
domains &ndash; for example, between an enterprise domain and the domain of a
third-party attack mitigation service &ndash; as well as to a single administrative
domain. DOTS is generally assumed to be most effective when aiding coordination
of attack response between two or more participating networks, but single
domain scenarios are valuable in their own right, as when aggregating
intra-domain DOTS client signals for inter-domain coordinated attack response.</t>

<t>This document does not address any administrative or business agreements that
may be established between involved DOTS parties. Those considerations are out
of scope. Regardless, this document assumes necessary authentication and
authorization mechanisms are put in place so that only authorized clients can
invoke the DOTS service.</t>

<t>A detailed set of DOTS requirements are discussed in
<xref target="I-D.ietf-dots-requirements"></xref>, and the DOTS architecture is assumed to follow
those requirements. Only new behavioral requirements are described in this
document.</t>

</section>
<section anchor="assumptions" title="Assumptions">

<t>This document makes the following assumptions:</t>

<t><list style="symbols">
  <t>All domains in which DOTS is deployed are assumed to offer the required
connectivity between DOTS agents and any intermediary network elements, but
the architecture imposes no additional limitations on the form of
connectivity.</t>
  <t>Congestion and resource exhaustion are intended outcomes of a DDoS attack
<xref target="RFC4732"/>. Some operators may utilize non-impacted paths or networks for
DOTS, but in general conditions should be assumed to be hostile and that DOTS
must be able to function in all circumstances, including when the signaling
path is significantly impaired.</t>
  <t>There is no universal DDoS attack scale threshold triggering a coordinated
response across administrative domains. A network domain administrator, or
service or application owner may arbitrarily set attack scale threshold
triggers, or manually send requests for mitigation.</t>
  <t>Mitigation requests may be sent to one or more upstream DOTS servers based on
criteria determined by DOTS client administrators and the underlying network
configuration. The number of DOTS servers with which a given DOTS client has
established communications is determined by local policy and is
deployment-specific. For example, a DOTS client of a multi-homed network may
support built-in policies to establish DOTS relationships with DOTS servers
located upstream of each interconnection link.</t>
  <t>The mitigation capacity and/or capability of domains receiving requests for
coordinated attack response is opaque to the domains sending the request. The
domain receiving the DOTS client signal may or may not have sufficient
capacity or capability to filter any or all DDoS attack traffic directed at
a target. In either case, the upstream DOTS server may redirect a request to
another DOTS server. Redirection may be local to the redirecting DOTS server&rsquo;s
domain, or may involve a third-party domain.</t>
  <t>DOTS client and server signals, as well as messages sent through the data
channel, are sent across any transit networks with the same probability of
delivery as any other traffic between the DOTS client domain and the DOTS
server domain. Any encapsulation required for successful delivery is left
untouched by transit network elements. DOTS server and DOTS client cannot
assume any preferential treatment of DOTS signals. Such preferential treatment
may be available in some deployments (e.g., intra-domain scenarios), and the
DOTS architecture does not preclude its use when available. However, DOTS
itself does not address how that may be done.</t>
  <t>The architecture allows for, but does not assume, the presence of Quality of
Service (QoS) policy agreements between DOTS-enabled peer networks or local
QoS prioritization aimed at ensuring delivery of DOTS messages between DOTS
agents. QoS is an operational consideration only, not a functional part of
the DOTS architecture.</t>
  <t>The signal and data channels may be loosely coupled, and may not terminate on
the same DOTS server.</t>
</list></t>

</section>
</section>
<section anchor="architecture" title="DOTS Architecture">

<t>The basic high-level DOTS architecture is illustrated in <xref target="fig-basic-arch"/>:</t>

<figure title="Basic DOTS Architecture" anchor="fig-basic-arch"><artwork><![CDATA[
    +-----------+            +-------------+
    | Mitigator | ~~~~~~~~~~ | DOTS Server |
    +-----------+            +-------------+
                                    |
                                    |
                                    |
    +---------------+        +-------------+
    | Attack Target | ~~~~~~ | DOTS Client |
    +---------------+        +-------------+
]]></artwork></figure>

<t>A simple example instantiation of the DOTS architecture could be an enterprise
as the attack target for a volumetric DDoS attack, and an upstream DDoS
mitigation service as the mitigator. The enterprise (attack target) is
connected to the Internet via a link that is getting saturated, and the
enterprise suspects it is under DDoS attack. The enterprise has a DOTS client,
which obtains information about the DDoS attack, and signals the DOTS server
for help in mitigating the attack. The DOTS server in turn invokes one or more
mitigators, which are tasked with mitigating the actual DDoS attack, and hence
aim to suppress the attack traffic while allowing valid traffic to reach the
attack target.</t>

<t>The scope of the DOTS specifications is the interfaces between the DOTS
client and DOTS server. The interfaces to the attack target and the mitigator
are out of scope of DOTS. Similarly, the operation of both the attack target and
the mitigator is out of scope of DOTS. Thus, DOTS neither specifies how an
attack target decides it is under DDoS attack, nor does DOTS specify how a
mitigator may actually mitigate such an attack. A DOTS client&rsquo;s request for
mitigation is advisory in nature, and may not lead to any mitigation at all,
depending on the DOTS server domain&rsquo;s capacity and willingness to mitigate on
behalf of the DOTS client&rsquo;s domain.</t>

<t>As illustrated in <xref target="fig-interfaces"/>, there are two interfaces between the
DOTS server and the DOTS client.</t>

<figure title="DOTS Interfaces" anchor="fig-interfaces"><artwork><![CDATA[
    +---------------+                                 +---------------+
    |               | <------- Signal Channel ------> |               |
    |  DOTS Client  |                                 |  DOTS Server  |
    |               | <=======  Data Channel  ======> |               |
    +---------------+                                 +---------------+
]]></artwork></figure>

<t>The DOTS client may be provided with a list of DOTS servers, each associated
with one or more IP addresses. These addresses may or may not be of the same
address family. The DOTS client establishes one or more sessions by connecting
to the provided DOTS server addresses.</t>

<t>The primary purpose of the signal channel is for a DOTS client to ask a
DOTS server for help in mitigating an attack, and for the DOTS server to inform
the DOTS client about the status of such mitigation. The DOTS client does this
by sending a client signal, which contains information about the attack
target(s). The client signal may also include telemetry information about the
attack, if the DOTS client has such information available. The DOTS server in
turn sends a server signal to inform the DOTS client of whether it will honor
the mitigation request. Assuming it will, the DOTS server initiates attack
mitigation, and periodically informs the DOTS client about the status of the
mitigation.  Similarly, the DOTS client periodically informs the DOTS server
about the client&rsquo;s status, which at a minimum provides client (attack target)
health information, but it may also include telemetry information about the
attack as it is now seen by the client. At some point, the DOTS client may
decide to terminate the server-side attack mitigation, which it indicates to the
DOTS server over the signal channel. A mitigation may also be terminated if a
DOTS client-specified mitigation lifetime is exceeded. Note that the signal
channel may need to operate over a link that is experiencing a DDoS attack and
hence is subject to severe packet loss and high latency.</t>

<t>While DOTS is able to request mitigation with just the signal channel, the
addition of the DOTS data channel provides for additional and more efficient
capabilities; both channels are required in the DOTS architecture. The primary
purpose of the data channel is to support DOTS related configuration and policy
information exchange between the DOTS client and the DOTS server. Examples of
such information include, but are not limited to:</t>

<t><list style="symbols">
  <t>Creating identifiers, such as names or aliases, for resources for which
mitigation may be requested. Such identifiers may then be used in subsequent
signal channel exchanges to refer more efficiently to the resources under
attack, as seen in <xref target="fig-resource-identifiers"/>, using JSON to serialize the
data:</t>
</list></t>

<figure title="Protected resource identifiers" anchor="fig-resource-identifiers"><artwork><![CDATA[
        {
            "https1": [
                "192.0.2.1:443",
                "198.51.100.2:443",
            ],
            "proxies": [
                "203.0.113.3:3128",
                "[2001:db8:ac10::1]:3128"
            ],
            "api_urls": "https://apiserver.example.com/api/v1",
        }
]]></artwork></figure>

<t><list style="symbols">
  <t>Black-list management, which enables a DOTS client to inform the DOTS server
about sources to suppress.</t>
  <t>White-list management, which enables a DOTS client to inform the DOTS server
about sources from which traffic is always accepted.</t>
  <t>Filter management, which enables a DOTS client to install or remove traffic
filters dropping or rate-limiting unwanted traffic.</t>
  <t>DOTS client provisioning.</t>
</list></t>

<t>Note that while it is possible to exchange the above information before, during
or after a DDoS attack, DOTS requires reliable delivery of this information and
does not provide any special means for ensuring timely delivery of it during an
attack. In practice, this means that DOTS deployments should not rely on such
information being exchanged during a DDoS attack.</t>

<section anchor="operations" title="DOTS Operations">
<t>DOTS does not prescribe any specific deployment models, however DOTS is designed
with some specific requirements around the different DOTS agents and their
relationships.</t>

<t>First of all, a DOTS agent belongs to a domain that has an identity which can be
authenticated and authorized. DOTS agents communicate with each other over a
mutually authenticated signal channel and data channel. However, before they can
do so, a service relationship needs to be established between them.  The details
and means by which this is done is outside the scope of DOTS, however an example
would be for an enterprise A (DOTS client) to sign up for DDoS service from
provider B (DOTS server). This would establish a (service) relationship between
the two that enables enterprise A&rsquo;s DOTS client to establish a signal channel
with provider B&rsquo;s DOTS server. A and B will authenticate each other, and B can
verify that A is authorized for its service.</t>

<t>From an operational and design point of view, DOTS assumes that the above
relationship is established prior to a request for DDoS attack mitigation. In
particular, it is assumed that bi-directional communication is possible at this
time between the DOTS client and DOTS server. Furthermore, it is assumed that
additional service provisioning, configuration and information exchange can be
performed by use of the data channel, if operationally required. It is not until
this point that the mitigation service is available for use.</t>

<t>Once the mutually authenticated signal channel has been established, it will
remain active. This is done to increase the likelihood that the DOTS client
can signal the DOTS server for help when the attack target is being flooded,
and similarly raise the probability that DOTS server signals reach the client
regardless of inbound link congestion.  This does not necessarily imply that the
attack target and the DOTS client have to be co-located in the same
administrative domain, but it is expected to be a common scenario.</t>

<t>DDoS mitigation with the help of an upstream mitigator may involve some
form of traffic redirection whereby traffic destined for the attack target is
steered towards the mitigator. Common mechanisms to achieve this redirection
depend on BGP <xref target="RFC4271"></xref> and DNS <xref target="RFC1035"></xref>. The mitigator in turn inspects and
scrubs the traffic, and forwards the resulting (hopefully non-attack) traffic to
the attack target. Thus, when a DOTS server receives an attack mitigation
request from a DOTS client, it can be viewed as a way of causing traffic
redirection for the attack target indicated.</t>

<t>DOTS relies on mutual authentication and the pre-established service
relationship between the DOTS client&rsquo;s domain and the DOTS server&rsquo;s domain to
provide basic authorization. The DOTS server should enforce additional
authorization mechanisms to restrict the mitigation scope a DOTS client can
request, but such authorization mechanisms are deployment-specific.</t>

<t>Although co-location of DOTS server and mitigator within the same domain is
expected to be a common deployment model, it is assumed that operators may
require alternative models. Nothing in this document precludes such
alternatives.</t>

</section>
<section anchor="components" title="Components">

<section anchor="dots-client" title="DOTS Client">

<t>A DOTS client is a DOTS agent from which requests for help coordinating attack
response originate. The requests may be in response to an active, ongoing
attack against a target in the DOTS client&rsquo;s domain, but no active attack is
required for a DOTS client to request help. Operators may wish to have upstream
mitigators in the network path for an indefinite period, and are restricted only
by business relationships when it comes to duration and scope of requested
mitigation.</t>

<t>The DOTS client requests attack response coordination from a DOTS server over
the signal channel, including in the request the DOTS client&rsquo;s desired
mitigation scoping, as described in <xref target="I-D.ietf-dots-requirements"></xref>. The actual
mitigation scope and countermeasures used in response to the attack are up to
the DOTS server and mitigator operators, as the DOTS client may have a narrow
perspective on the ongoing attack. As such, the DOTS client&rsquo;s request for
mitigation should be considered advisory: guarantees of DOTS server availability
or mitigation capacity constitute service level agreements and are out of scope
for this document.</t>

<t>The DOTS client adjusts mitigation scope and provides available attack details
at the direction of its local administrator. Such direction may involve manual
or automated adjustments in response to feedback from the DOTS server.</t>

<t>To provide a metric of signal health and distinguish an idle signal channel
from a disconnected or defunct session, the DOTS client sends a heartbeat over
the signal channel to maintain its half of the channel. The DOTS client
similarly expects a heartbeat from the DOTS server, and may consider a session
terminated in the extended absence of a DOTS server heartbeat.</t>

</section>
<section anchor="dots-server" title="DOTS Server">

<t>A DOTS server is a DOTS agent capable of receiving, processing and possibly
acting on requests for help coordinating attack response DOTS clients.  The DOTS
server authenticates and authorizes DOTS clients as described in
<xref target="dots-sessions"/>, and maintains session state, tracking requests for
mitigation, reporting on the status of active mitigations, and terminating
sessions in the extended absence of a client heartbeat or when a session times
out.</t>

<t>Assuming the preconditions discussed below exist, a DOTS client maintaining an
active session with a DOTS server may reasonably expect some level of mitigation
in response to a request for coordinated attack response.</t>

<t>The DOTS server enforces authorization of DOTS clients&rsquo; signals for mitigation.
The mechanism of enforcement is not in scope for this document, but is expected
to restrict requested mitigation scope to addresses, prefixes, and/or services
owned by the DOTS client&rsquo;s administrative domain, such that a DOTS client from
one domain is not able to influence the network path to another domain. A DOTS
server MUST reject requests for mitigation of resources not owned by the
requesting DOTS client&rsquo;s administrative domain. A DOTS server MAY also refuse a
DOTS client&rsquo;s mitigation request for arbitrary reasons, within any limits
imposed by business or service level agreements between client and server
domains. If a DOTS server refuses a DOTS client&rsquo;s request for mitigation, the
DOTS server SHOULD include the refusal reason in the server signal sent to the
client.</t>

<t>A DOTS server is in regular contact with one or more mitigators. If a DOTS
server accepts a DOTS client&rsquo;s request for help, the DOTS server forwards a
translated form of that request to the mitigator(s) responsible for scrubbing
attack traffic. Note that the form of the translated request passed from the
DOTS server to the mitigator is not in scope: it may be as simple as an alert to
mitigator operators, or highly automated using vendor or open application
programming interfaces supported by the mitigator. The DOTS server MUST report
the actual scope of any mitigation enabled on behalf of a client.</t>

<t>The DOTS server SHOULD retrieve available metrics for any mitigations activated
on behalf of a DOTS client, and SHOULD include them in server signals sent to
the DOTS client originating the request for mitigation.</t>

<t>To provide a metric of signal health and distinguish an idle signal channel
from a disconnected or defunct channel, the DOTS server MUST send a heartbeat
over the signal channel to maintain its half of the channel. The DOTS server
similarly expects a heartbeat from the DOTS client, and MAY consider a session
terminated in the extended absence of a DOTS client heartbeat.</t>

</section>
<section anchor="dots-gateway" title="DOTS Gateway">

<t>Traditional client/server relationships may be expanded by chaining DOTS
sessions. This chaining is enabled through &ldquo;logical concatenation&rdquo; of a DOTS
server and a DOTS client, resulting in an application analogous to the SIP
logical entity of a Back-to-Back User Agent (B2BUA) <xref target="RFC7092"></xref>. The term DOTS
gateway is used here in the descriptions of selected scenarios involving this
application.</t>

<t>A DOTS gateway may be deployed client-side, server-side or both.  The gateway
may terminate multiple discrete client connections and may aggregate these into
a single or multiple DOTS sessions.</t>

<t>The DOTS gateway will appear as a server to its downstream agents and as a
client to its upstream agents, a functional concatenation of the DOTS client and
server roles, as depicted in <xref target="fig-dots-gateway"/>:</t>

<figure title="DOTS gateway" anchor="fig-dots-gateway"><artwork><![CDATA[
                      +-------------+
                      |    | D |    |
      +----+          |    | O |    |         +----+
      | c1 |----------| s1 | T | c2 |---------| s2 |
      +----+          |    | S |    |         +----+
                      |    | G |    |
                      +-------------+
]]></artwork></figure>

<t>The DOTS gateway MUST perform full stack DOTS session termination and
reorigination between its client and server side. The details of how this is
achieved are implementation specific. The DOTS protocol does not include any
special features related to DOTS gateways, and hence from a DOTS perspective,
whenever a DOTS gateway is present, the DOTS session simply
terminates/originates there.</t>

</section>
</section>
<section anchor="agent-relationships" title="DOTS Agent Relationships">

<t>So far, we have only considered a relatively simple scenario of a single DOTS
client associated with a single DOTS server, however DOTS supports more advanced
relationships.</t>

<t>A DOTS server may be associated with one or more DOTS clients, and those DOTS
clients may belong to different domains. An example scenario is a mitigation
provider serving multiple attack targets (<xref target="fig-multi-client-server"/>).</t>

<figure title="DOTS server with multiple clients" anchor="fig-multi-client-server"><artwork><![CDATA[
   DOTS clients       DOTS server
   +---+
   | c |-----------
   +---+           \
   c1.example.org   \
                     \
   +---+              \ +---+
   | c |----------------| S |
   +---+              / +---+
   c1.example.com    /  dots1.example.net
                    /
   +---+           /
   | c |-----------
   +---+
   c2.example.com
]]></artwork></figure>

<t>A DOTS client may be associated with one or more DOTS servers, and those DOTS
servers may belong to different domains.  This may be to ensure high
availability or co-ordinate mitigation with more than one directly connected
ISP.  An example scenario is for an enterprise to have DDoS mitigation service
from multiple providers, as shown in <xref target="fig-multi-homed-client"/>.</t>

<figure title="Multi-Homed DOTS Client" anchor="fig-multi-homed-client"><artwork><![CDATA[
   DOTS client        DOTS servers
                       +---+
            -----------| S |
           /           +---+
          /            dots1.example.net
         /
   +---+/              +---+
   | c |---------------| S |
   +---+\              +---+
         \             dots.example.org
          \
           \           +---+
            -----------| S |
                       +---+
   c.example.com       dots2.example.net
]]></artwork></figure>

<t>Deploying a multi-homed client requires extra care and planning, as the DOTS
servers with which the multi-homed client communicates may not be affiliated.
Should the multi-homed client simultaneously request for mitigation from all
servers with which it has established signal channels, the client may
unintentionally inflict additional network disruption on the resources it
intends to protect. In one of the worst cases, a multi-homed DOTS client could
cause a permanent routing loop of traffic destined for the client&rsquo;s protected
services, as the uncoordinated DOTS servers&rsquo; mitigators all try to
divert that traffic to their own scrubbing centers.</t>

<t>The DOTS protocol itself provides no fool-proof method to prevent such
self-inflicted harms as a result deploying multi-homed DOTS clients. If
DOTS client implementations nevertheless include support for multi-homing, they
are expected to be aware of the risks, and consequently to include measures
aimed at reducing the likelihood of negative outcomes.  Sample multi-homing deployment guidelines
and recommendations are elaborated in <xref target="appendix"></xref>.</t>

<section anchor="gatewayed-signaling" title="Gatewayed Signaling">

<t>As discussed in <xref target="dots-gateway"/>, a DOTS gateway is a logical function chaining
DOTS sessions through concatenation of a DOTS server and DOTS client.</t>

<t>An example scenario, as shown in <xref target="fig-client-gateway-agg"/> and
<xref target="fig-client-gateway-noagg"/>, is for an enterprise to have deployed multiple
DOTS capable devices which are able to signal intra-domain using TCP <xref target="RFC0793"></xref>
on un-congested links to a DOTS gateway which may then transform these to a UDP
<xref target="RFC0768"></xref> transport inter-domain where connection oriented transports may
degrade; this applies to the signal channel only, as the data channel requires a
connection-oriented transport. The relationship between the gateway and its
upstream agents is opaque to the initial clients.</t>

<figure title="Client-Side Gateway with Aggregation" anchor="fig-client-gateway-agg"><artwork><![CDATA[
      +---+
      | c |\
      +---+ \              +---+
             \-----TCP-----| D |               +---+
      +---+                | O |               |   |
      | c |--------TCP-----| T |------UDP------| S |
      +---+                | S |               |   |
             /-----TCP-----| G |               +---+
      +---+ /              +---+
      | c |/
      +---+
      example.com       example.com           example.net
      DOTS clients      DOTS gateway (DOTSG)  DOTS server
]]></artwork></figure>

<figure title="Client-Side Gateway without Aggregation" anchor="fig-client-gateway-noagg"><artwork><![CDATA[
      +---+
      | c |\
      +---+ \              +---+
             \-----TCP-----| D |------UDP------+---+
      +---+                | O |               |   |
      | c |--------TCP-----| T |------UDP------| S |
      +---+                | S |               |   |
             /-----TCP-----| G |------UDP------+---+
      +---+ /              +---+
      | c |/
      +---+
      example.com       example.com           example.net
      DOTS clients      DOTS gateway (DOTSG)  DOTS server
]]></artwork></figure>

<t>This may similarly be deployed in the inverse scenario where the gateway resides
in the server-side domain and may be used to terminate and/or aggregate multiple
clients to single transport as shown in figures <xref target="fig-server-gateway-agg"/> and
<xref target="fig-server-gateway-noagg"/>.</t>

<figure title="Server-Side Gateway with Aggregation" anchor="fig-server-gateway-agg"><artwork><![CDATA[
      +---+
      | c |\
      +---+ \              +---+
             \-----UDP-----| D |               +---+
      +---+                | O |               |   |
      | c |--------TCP-----| T |------TCP------| S |
      +---+                | S |               |   |
             /-----TCP-----| G |               +---+
      +---+ /              +---+
      | c |/
      +---+
      example.com       example.net           example.net
      DOTS clients      DOTS gateway (DOTSG)  DOTS server
]]></artwork></figure>

<figure title="Server-Side Gateway without Aggregation" anchor="fig-server-gateway-noagg"><artwork><![CDATA[
      +---+
      | c |\
      +---+ \              +---+
             \-----UDP-----| D |------TCP------+---+
      +---+                | O |               |   |
      | c |--------TCP-----| T |------TCP------| S |
      +---+                | S |               |   |
             /-----UDP-----| G |------TCP------+---+
      +---+ /              +---+
      | c |/
      +---+
      example.com       example.net           example.net
      DOTS clients      DOTS gateway (DOTSG)  DOTS server
]]></artwork></figure>

<t>This document anticipates scenarios involving multiple DOTS gateways. An example
is a DOTS gateway at the network client&rsquo;s side, and another one at the server
side. The first gateway can be located at a CPE to aggregate requests from
multiple DOTS clients enabled in an enterprise network. The second DOTS gateway
is deployed on the provider side. This scenario can be seen as a combination of
the client-side and server-side scenarios.</t>

</section>
</section>
</section>
<section anchor="concepts" title="Concepts">

<section anchor="dots-sessions" title="DOTS Sessions">

<t>In order for DOTS to be effective as a vehicle for DDoS mitigation requests,
one or more DOTS clients must establish ongoing communication with one or more
DOTS servers. While the preconditions for enabling DOTS in or among network
domains may also involve business relationships, service level agreements, or
other formal or informal understandings between network operators, such
considerations are out of scope for this document.</t>

<t>A DOTS session is established, bilateral exchange of data between an associated
DOTS client and a DOTS server. In the DOTS architecture, data is exchanged
between DOTS agents over signal and data channels. Regardless, a DOTS session is
characterized by the presence of an established signal channel. A data channel
associated with a signal channel may be thought of as part of the DOTS session,
but the termination of that data channel does not terminate the DOTS session.
Conversely, a DOTS session cannot exist without an established signal channel:
when an established signal channel is terminated for any reason, the DOTS
session is also said to be terminated.</t>

<section anchor="dots-session-preconditions" title="Preconditions">

<t>Prior to establishing a DOTS session between agents, the owners of the networks,
domains, services or applications involved are assumed to have agreed upon the
terms of the relationship involved. Such agreements are out of scope for this
document, but must be in place for a functional DOTS architecture.</t>

<t>It is assumed that as part of any DOTS service agreement, the DOTS client is
provided with all data and metadata required to establish communication with the
DOTS server. Such data and metadata would include any cryptographic information
necessary to meet the message confidentiality, integrity and authenticity
requirement in <xref target="I-D.ietf-dots-requirements"></xref>, and might also include the pool of
DOTS server addresses and ports the DOTS client should use for signal and data
channel messaging.</t>

</section>
<section anchor="establishing-dots-session" title="Establishing the DOTS Session">

<t>With the required business agreements in place, the DOTS client
initiates a signal session by contacting its DOTS server(s) over the signal
channel and the data channel. To allow for DOTS service flexibility, neither the
order of contact nor the time interval between channel creations is specified. A
DOTS client MAY establish signal channel first, and then data channel, or vice
versa.</t>

<t>The methods by which a DOTS client receives the address and associated service
details of the DOTS server are not prescribed by this document. For example, a
DOTS client may be directly configured to use a specific DOTS server IP address
and port, and directly provided with any data necessary to satisfy the Peer
Mutual Authentication requirement in <xref target="I-D.ietf-dots-requirements"></xref>, such as
symmetric or asymmetric keys, usernames and passwords, etc. All configuration
and authentication information in this scenario is provided out-of-band by the
domain operating the DOTS server.</t>

<t>At the other extreme, the architecture in this document allows for a form of
DOTS client auto-provisioning. For example, the domain operating the DOTS server
or servers might provide the client domain only with symmetric or asymmetric
keys to authenticate the provisioned DOTS clients. Only the keys would then be
directly configured on DOTS clients, but the remaining configuration required to
provision the DOTS clients could be learned through mechanisms similar to DNS
SRV <xref target="RFC2782"/> or DNS Service Discovery <xref target="RFC6763"/>.</t>

<t>The DOTS client SHOULD successfully authenticate and exchange messages with the
DOTS server over both signal and data channel as soon as possible to confirm
that both channels are operational.</t>

<t>As described in <xref target="I-D.ietf-dots-requirements"></xref>, the DOTS client can configure
preferred values for acceptable signal loss, mitigation lifetime, and heartbeat
intervals when establishing the DOTS session. A DOTS session is not active until
DOTS agents have agreed on the values for these DOTS session parameters, a
process defined by the protocol.</t>

<t>Once the DOTS client begins receiving DOTS server signals, the DOTS session
is active. At any time during the DOTS session, the DOTS client may use the
data channel to adjust initial configuration, manage black- and white-listed
prefixes or addresses, leverage vendor-specific extensions, and so on. Note that
unlike the signal channel, there is no requirement that the data channel remain
operational in attack conditions (See Data Channel Requirements,
<xref target="I-D.ietf-dots-requirements"></xref>).</t>

</section>
<section anchor="maintaining-dots-session" title="Maintaining the DOTS Session">

<t>DOTS clients and servers periodically send heartbeats to each other over the
signal channel, per Operational Requirements discussed in
<xref target="I-D.ietf-dots-requirements"></xref>. DOTS agent operators SHOULD configure the
heartbeat interval such that the frequency does not lead to accidental denials
of service due to the overwhelming number of heartbeats a DOTS agent must field.</t>

<t>Either DOTS agent may consider a DOTS session terminated in the extended
absence of a heartbeat from its peer agent. The period of that absence will be
established in the protocol definition.</t>

</section>
</section>
<section anchor="modes-of-signaling" title="Modes of Signaling">

<t>This section examines the modes of signaling between agents in a DOTS
architecture.</t>

<section anchor="direct-signaling" title="Direct Signaling">

<t>A DOTS session may take the form of direct signaling between the DOTS
clients and servers, as shown in <xref target="fig-direct-signaling"/>.</t>

<figure title="Direct Signaling" anchor="fig-direct-signaling"><artwork><![CDATA[
        +-------------+                            +-------------+
        | DOTS client |<------signal session------>| DOTS server |
        +-------------+                            +-------------+
]]></artwork></figure>

<t>In a direct DOTS session, DOTS client and server are communicating directly.
Direct signaling may exist inter- or intra-domain. The DOTS session is
abstracted from the underlying networks or network elements the signals
traverse: in direct signaling, the DOTS client and server are logically
adjacent.</t>

</section>
<section anchor="redirected-signaling" title="Redirected Signaling">

<t>In certain circumstances, a DOTS server may want to redirect a DOTS client to
an alternative DOTS server for a DOTS session. Such circumstances include but
are not limited to:</t>

<t><list style="symbols">
  <t>Maximum number of DOTS sessions with clients has been reached;</t>
  <t>Mitigation capacity exhaustion in the mitigator with which the
specific DOTS server is communicating;</t>
  <t>Mitigator outage or other downtime, such as scheduled maintenance;</t>
  <t>Scheduled DOTS server maintenance;</t>
  <t>Scheduled modifications to the network path between DOTS server and DOTS
client.</t>
</list></t>

<t>A basic redirected DOTS session resembles the following, as shown in
<xref target="fig-redirected-signaling"/>.</t>

<figure title="Redirected Signaling" anchor="fig-redirected-signaling"><artwork><![CDATA[
        +-------------+                            +---------------+
        |             |<-(1)--- DOTS session 1 --->|               |
        |             |                            |               |
        |             |<=(2)== redirect to B ======|               |
        | DOTS client |                            | DOTS server A |
        |             |X-(4)--- DOTS session 1 ---X|               |
        |             |                            |               |
        |             |                            |               |
        +-------------+                            +---------------+
               ^
               |
              (3) DOTS session 2
               |
               v
        +---------------+
        | DOTS server B |
        +---------------+
]]></artwork></figure>

<t><list style="numbers">
  <t>Previously established DOTS session 1 exists between a DOTS client and
DOTS server A.</t>
  <t>DOTS server A sends a server signal redirecting the client to DOTS server B.</t>
  <t>If the DOTS client does not already have a separate DOTS session with
the redirection target, the DOTS client initiates and establishes DOTS
session 2 with DOTS server B.</t>
  <t>Having redirected the DOTS client, DOTS server A ceases sending server
signals. The DOTS client likewise stops sending client signals to DOTS server
A. DOTS session 1 is terminated.</t>
</list></t>

</section>
<section anchor="recursive-signaling" title="Recursive Signaling">

<t>DOTS is centered around improving the speed and efficiency of coordinated
response to DDoS attacks. One scenario not yet discussed involves coordination
among federated domains operating DOTS servers and mitigators.</t>

<t>In the course of normal DOTS operations, a DOTS client communicates the need for
mitigation to a DOTS server, and that server initiates mitigation on a
mitigator with which the server has an established service relationship. The
operator of the mitigator may in turn monitor mitigation performance and
capacity, as the attack being mitigated may grow in severity beyond the
mitigating domain&rsquo;s capabilities.</t>

<t>The operator of the mitigator has limited options in the event a DOTS
client-requested mitigation is being overwhelmed by the severity of the attack.
Out-of-scope business or service level agreements may permit the mitigating
domain to drop the mitigation and let attack traffic flow unchecked to the
target, but this is only encourages attack escalation. In the case where
the mitigating domain is the upstream service provider for the attack target,
this may mean the mitigating domain and its other services and users continue to
suffer the incidental effects of the attack.</t>

<t>A recursive signaling model as shown in <xref target="fig-recursive-signaling"/> offers
an alternative. In a variation of the use case &ldquo;Enterprise with an upstream
transit provider DDoS mitigation service&rdquo; described in
<xref target="I-D.ietf-dots-use-cases"></xref>, a domain operating a DOTS server and mitigator also
operates a DOTS client. This DOTS client has an established DOTS session
with a DOTS server belonging to a separate administrative domain.</t>

<t>With these preconditions in place, the operator of the mitigator being
overwhelmed or otherwise performing inadequately may request mitigation for the
attack target from this separate DOTS-aware domain. Such a request recurses the
originating mitigation request to the secondary DOTS server, in the hope of
building a cumulative mitigation against the attack.</t>

<figure title="Recursive Signaling" anchor="fig-recursive-signaling"><artwork><![CDATA[
                     example.net domain
                     . . . . . . . . . . . . . . . . .
                     .    Gn                         .
       +----+    1   .  +----+       +-----------+   .
       | Cc |<--------->| Sn |~~~~~~~| Mitigator |   .
       +----+        .  +====+       |     Mn    |   .
                     .  | Cn |       +-----------+   .
     example.com     .  +----+                       .
        client       .    ^                          .
                     . . .|. . . . . . . . . . . . . .
                          |
                        1 |
                          |
                     . . .|. . . . . . . . . . . . . .
                     .    v                          .
                     .  +----+       +-----------+   .
                     .  | So |~~~~~~~| Mitigator |   .
                     .  +----+       |     Mo    |   .
                     .               +-----------+   .
                     .                               .
                     . . . . . . . . . . . . . . . . .
                     example.org domain
]]></artwork></figure>

<t>In <xref target="fig-recursive-signaling"/>, client Cc signals a request for mitigation
across inter-domain DOTS session 1 to the DOTS server Sn belonging to the
example.net domain. DOTS server Sn enables mitigation on mitigator Mn. DOTS
server Sn is half of DOTS gateway Gn, being deployed logically back-to-back with
DOTS client Cn, which has pre-existing inter-domain DOTS session 2 with the DOTS
server So belonging to the example.org domain. At any point, DOTS server Sn MAY
recurse an on-going mitigation request through DOTS client Cn to DOTS server So,
in the expectation that mitigator Mo will be activated to aid in the defense of
the attack target.</t>

<t>Recursive signaling is opaque to the DOTS client. To maximize mitigation
visibility to the DOTS client, however, the recursing domain SHOULD provide
recursed mitigation feedback in signals reporting on mitigation status to the
DOTS client. For example, the recursing domain&rsquo;s mitigator should incorporate
into mitigation status messages available metrics such as dropped packet or byte
counts from the recursed mitigation.</t>

<t>DOTS clients involved in recursive signaling must be able to withdraw requests
for mitigation without warning or justification, per
<xref target="I-D.ietf-dots-requirements"></xref>.</t>

<t>Operators recursing mitigation requests MAY maintain the recursed mitigation for
a brief, protocol-defined period in the event the DOTS client originating the
mitigation withdraws its request for help, as per the discussion of managing
mitigation toggling in the operational requirements
(<xref target="I-D.ietf-dots-requirements"></xref>).</t>

<t>Deployment of recursive signaling may result in traffic redirection, examination
and mitigation extending beyond the initial bilateral relationship between DOTS
client and DOTS server. As such, client control over the network path of
mitigated traffic may be reduced. DOTS client operators should be aware of any
privacy concerns, and work with DOTS server operators employing recursive
signaling to ensure shared sensitive material is suitably protected.</t>

</section>
<section anchor="anycast-signaling" title="Anycast Signaling">

<t>The DOTS architecture does not assume the availability of anycast within a DOTS
deployment, but neither does the architecture exclude it. Domains operating DOTS
servers MAY deploy DOTS servers with an anycast Service Address as described in
BCP 126 <xref target="RFC4786"></xref>. In such a deployment, DOTS clients connecting to the DOTS
Service Address may be communicating with distinct DOTS servers, depending on
the network configuration at the time the DOTS clients connect.  Among other
benefits, anycast signaling potentially offers the following:</t>

<t><list style="symbols">
  <t>Simplified DOTS client configuration, including service discovery through the
methods described in <xref target="RFC7094"></xref>. In this scenario, the &ldquo;instance discovery&rdquo;
message would be a DOTS client initiating a DOTS session to the DOTS server
anycast Service Address, to which the DOTS server would reply with a
redirection to the DOTS server unicast address the client should use for DOTS.</t>
  <t>Region- or customer-specific deployments, in which the DOTS Service Addresses
route to distinct DOTS servers depending on the client region or the customer
network in which a DOTS client resides.</t>
  <t>Operational resiliency, spreading DOTS signaling traffic across the DOTS
server domain&rsquo;s networks, and thereby also reducing the potential attack
surface, as described in BCP 126 <xref target="RFC4786"></xref>.</t>
</list></t>

<section anchor="anycast-signaling-considerations" title="Anycast Signaling Considerations">

<t>As long as network configuration remains stable, anycast DOTS signaling is to
the individual DOTS client indistinct from direct signaling. However, the
operational challenges inherent in anycast signaling are anything but
negligible, and DOTS server operators must carefully weigh the risks against the
benefits before deploying.</t>

<t>While the DOTS signal channel primarily operates over UDP per
<xref target="I-D.ietf-dots-requirements"></xref>, the signal channel also requires mutual
authentication between DOTS agents, with associated security state on both ends.</t>

<t>Network instability is of particular concern with anycast signaling, as DOTS
signal channels are expected to be long-lived, and potentially operating under
congested network conditions caused by a volumetric DDoS attack.</t>

<t>For example, a network configuration altering the route to the DOTS server
during active anycast signaling may cause the DOTS client to send messages to a
DOTS server other than the one with which it initially established a signaling
session. That second DOTS server may not have the security state of the
existing session, forcing the DOTS client to initialize a new DOTS session.
This challenge might in part be mitigated by use of pre-shared keys and session
resumption <xref target="RFC5246"></xref><xref target="RFC6347"/>, but keying material must be available to all
DOTS servers sharing the anycast Service Address in that case.</t>

<t>While the DOTS client will try to establish a new DOTS session with the
DOTS server now acting as the anycast DOTS Service Address, the link between
DOTS client and server may be congested with attack traffic, making signal
session establishment difficult. In such a scenario, anycast Service Address
instability becomes a sort of signal session flapping, with obvious negative
consequences for the DOTS deployment.</t>

<t>Anycast signaling deployments similarly must also take into account active
mitigations. Active mitigations initiated through a DOTS session may involve
diverting traffic to a scrubbing center. If the DOTS session flaps due to
anycast changes as described above, mitigation may also flap as the DOTS servers
sharing the anycast DOTS service address toggles mitigation on detecting
DOTS session loss, depending on whether the client has configured
mitigation on loss of signal.</t>

</section>
</section>
</section>
<section anchor="mit-request-triggers" title="Triggering Requests for Mitigation">

<t><xref target="I-D.ietf-dots-requirements"></xref> places no limitation on the circumstances in which
a DOTS client operator may request mitigation, nor does it demand justification
for any mitigation request, thereby reserving operational control over DDoS
defense for the domain requesting mitigation. This architecture likewise does
not prescribe the network conditions and mechanisms triggering a mitigation
request from a DOTS client.</t>

<t>However, considering selected possible mitigation triggers from an architectural
perspective offers a model for alternative or unanticipated triggers for DOTS
deployments. In all cases, what network conditions merit a mitigation request
are at the discretion of the DOTS client operator.</t>

<t>The interfaces required to trigger the mitigation request in the following
scenarios are implementation-specific.</t>

<section anchor="manual-mit-request" title="Manual Mitigation Request">

<t>A DOTS client operator may manually prepare a request for mitigation, including
scope and duration, and manually instruct the DOTS client to send the mitigation
request to the DOTS server. In context, a manual request is a request directly
issued by the operator without automated decision-making performed by a device
interacting with the DOTS client. Modes of manual mitigation requests include
an operator entering a command into a text interface, or directly interacting
with a graphical interface to send the request.</t>

<t>An operator might do this, for example, in response to notice of an attack
delivered by attack detection equipment or software, and the alerting detector
lacks interfaces or is not configured to use available interfaces to translate
the alert to a mitigation request automatically.</t>

<t>In a variation of the above scenario, the operator may have preconfigured on the
DOTS client mitigation request for various resources in the operator&rsquo;s domain.
When notified of an attack, the DOTS client operator manually instructs the DOTS
client to send the preconfigured mitigation request for the resources under
attack.</t>

<t>A further variant involves recursive signaling, as described in
<xref target="recursive-signaling"/>. The DOTS client in this case is the second half of a
DOTS gateway (back-to-back DOTS server and client). As in the previous scenario,
the scope and duration of the mitigation request are pre-existing, but in this
case are derived from the mitigation request received from a downstream DOTS
client by the DOTS server. Assuming the preconditions required by
<xref target="recursive-signaling"/> are in place, the DOTS gateway operator may at any time
manually request mitigation from an upstream DOTS server, sending a mitigation
request derived from the downstream DOTS client&rsquo;s request.</t>

<t>The motivations for a DOTS client operator to request mitigation manually are
not prescribed by this architecture, but are expected to include some of the
following:</t>

<t><list style="symbols">
  <t>Notice of an attack delivered via e-mail or alternative messaging</t>
  <t>Notice of an attack delivered via phone call</t>
  <t>Notice of an attack delivered through the interface(s) of networking
monitoring software deployed in the operator&rsquo;s domain</t>
  <t>Manual monitoring of network behavior through network monitoring software</t>
</list></t>

</section>
<section anchor="auto-conditional-mit" title="Automated Conditional Mitigation Request">

<t>Unlike manual mitigation requests, which depend entirely on the DOTS client
operator&rsquo;s capacity to react with speed and accuracy to every detected or
detectable attack, mitigation requests triggered by detected attack conditions
reduce the operational burden on the DOTS client operator, and minimize the
latency between attack detection and the start of mitigation.</t>

<t>Mitigation requests are triggered in this scenario by operator-specified network
conditions. Attack detection is deployment-specific, and not constrained by this
architecture. Similarly the specifics of a condition are left to the discretion
of the operator, though common conditions meriting mitigation include the
following:</t>

<t><list style="symbols">
  <t>Detected attack exceeding a rate in packets per second (pps).</t>
  <t>Detected attack exceeding a rate in bytes per second (bps).</t>
  <t>Detected resource exhaustion in an attack target.</t>
  <t>Detected resource exhaustion in the local domain&rsquo;s mitigator.</t>
  <t>Number of open connections to an attack target.</t>
  <t>Number of attack sources in a given attack.</t>
  <t>Number of active attacks against targets in the operator&rsquo;s domain.</t>
  <t>Conditional detection developed through arbitrary statistical analysis or deep
learning techniques.</t>
  <t>Any combination of the above.</t>
</list></t>

<t>When automated conditional mitigation requests are enabled, violations of any of
the above conditions, or any additional operator-defined conditions, will
trigger a mitigation request from the DOTS client to the DOTS server. The
interfaces between the application detecting the condition violation and the
DOTS client are implementation-specific.</t>

</section>
<section anchor="auto-mit-signal-loss" title="Automated Mitigation on Loss of Signal">

<t>To maintain a DOTS session, the DOTS client and the DOTS server exchange
regular but infrequent messages across the signal channel. In the absence of
an attack, the probability of message loss in the signaling channel should be
extremely low. Under attack conditions, however, some signal loss may be
anticipated as attack traffic congests the link, depending on the attack type.</t>

<t>While <xref target="I-D.ietf-dots-requirements"></xref> specifies the DOTS protocol be robust when
signaling under attack conditions, there are nevertheless scenarios in which the
DOTS signal is lost in spite of protocol best efforts. To handle such scenarios,
a DOTS client operator may configure the DOTS session to trigger mitigation
when the DOTS server ceases receiving DOTS client signals (or vice versa) beyond
the miss count or period permitted by the protocol.</t>

<t>The impact of mitigating due to loss of signal in either direction must be
considered carefully before enabling it. Signal loss is not caused by links
congested with attack traffic alone, and as such mitigation requests triggered
by signal channel degradation in either direction may incur unnecessary costs,
in network performance and operational expense alike.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This section describes identified security considerations for the DOTS
architecture.</t>

<t>DOTS is at risk from three primary attack vectors:  agent impersonation,
traffic injection and signal blocking.  These vectors may be exploited
individually or in concert by an attacker to confuse, disable, take information
from, or otherwise inhibit DOTS agents.</t>

<t>Any attacker with the ability to impersonate a legitimate client or server or,
indeed, inject false messages into the stream may potentially trigger/withdraw
traffic redirection, trigger/cancel mitigation activities or subvert
black/whitelists.  From an architectural standpoint, operators SHOULD ensure
best current practices for secure communication are observed for data and
signal channel confidentiality, integrity and authenticity.  Care must be taken
to ensure transmission is protected by appropriately secure means, reducing
attack surface by exposing only the minimal required services or interfaces.
Similarly, received data at rest SHOULD be stored with a satisfactory degree of
security.</t>

<t>As many mitigation systems employ diversion to scrub attack traffic, operators
of DOTS agents SHOULD ensure DOTS sessions are resistant to Man-in-the-Middle
(MitM) attacks. An attacker with control of a DOTS client may negatively
influence network traffic by requesting and withdrawing requests for mitigation
for particular prefixes, leading to route or DNS flapping.</t>

<t>Any attack targeting the availability of DOTS servers may disrupt the ability
of the system to receive and process DOTS signals resulting in failure to
fulfill a mitigation request.  DOTS agents SHOULD be given adequate protections,
again in accordance with best current practices for network and host security.</t>

</section>
<section anchor="contributors" title="Contributors">

<t><list style="hanging">
  <t hangText='Mohamed Boucadair'><vspace blankLines='0'/>
  Orange</t>
  <t>mohamed.boucadair@orange.com</t>
</list></t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>Thanks to Matt Richardson and Med Boucadair for their comments and suggestions.</t>

</section>
<section anchor="change-log" title="Change Log">

<t>2016-03-18      Initial revision</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;

    </references>

    <references title='Informative References'>

&I-D.ietf-dots-requirements;
&I-D.ietf-dots-use-cases;
&RFC0768;
&RFC0793;
&RFC1035;
&RFC2782;
&RFC4271;
&RFC4732;
&RFC4786;
&RFC5246;
&RFC6347;
&RFC6763;
&RFC7092;
&RFC7094;
&RFC4732;
&RFC3582;
&RFC4116;
&RFC8043;
&RFC7556;
&RFC6724;     
 </references>

       <section anchor="appendix" title="Multi-homing Operational Guidelines">
         
      <t>DOTS may be deployed within networks that are connected to one single
      upstream provider. It can also be enabled within networks that are
      multi-homed. The reader may refer to <xref target="RFC3582"></xref> for
      an overview of multi-homing goals and motivations. </t>

      <t>This appendix discusses DOTS multi-homing considerations,
      specifically to:<list style="numbers">
          <t>Complete the base DOTS architecture with multi-homing specifics.
          Those specifics need to be taking into account because: <list
              style="symbols">
              <t>Send a DOTS mitigation request to an arbitrary DOTS server
              won't help mitigating a DDoS attack.</t>

              <t>Blindly forking all DOTS mitigation requests among all
              available DOTS servers is suboptimal.</t>

              <t>Sequentially contacting DOTS servers may increase the delay
              before a mitigation plan is enforced.</t>
            </list></t>

          <t>Identify DOTS deployment schemes in a multi-homing context, where
          DOTS service can be offered by all or a subset of upstream
          providers.</t>

          <t>Sketch guidelines and recommendations for placing DOTS requests
          in multi-homed networks, e.g.,: <list style="symbols">
              <t>Select the appropriate DOTS server(s).</t>

              <t>Identify cases where anycast is not recommended.</t>
            </list></t>
        </list></t>

      <t>To that aim, this appendix adopts the following methodology: <list
          style="symbols">
          <t>Identify and extract viable deployment candidates from <xref
          target="I-D.ietf-dots-use-cases"></xref>.</t>

          <t>Augment the description with multi-homing technicalities, e.g.,
          <list style="symbols">
              <t>One vs. multiple upstream network providers</t>

              <t>One vs. multiple interconnect routers</t>

              <t>Provider-Independent (PI) vs. Provider-Aggregatable (PA)</t>
            </list></t>

          <t>Describe the recommended behavior of DOTS clients and gateways
          for each case.</t>
        </list></t>

      <t>Multi-homed DOTS agents are assumed to make use of the protocols
      defined in <xref target="I-D.ietf-dots-signal-channel"></xref> and <xref
      target="I-D.ietf-dots-data-channel"></xref>; no specific extension is
      required to the base DOTS protocols for deploying DOTS in a multihomed
      context.</t>

      <t><xref target="dep"></xref> provides some sample (non-exhaustive)
      deployment schemes to illustrate how DOTS agents may be deployed for
      each of the scenarios introduced in <xref target="msc"></xref>.</t>

      <texttable anchor="dep" style="all" title="Sample Deployment Cases">
        <ttcol align="center">Scenario</ttcol>

        <ttcol align="center">DOTS client</ttcol>

        <ttcol align="center">DOTS gateway</ttcol>

        <c>Residential CPE</c>

        <c>CPE</c>

        <c>N/A</c>

        <c>Single CPE, Multiple provisioning domains</c>

        <c>internal hosts or CPE</c>

        <c>CPE</c>

        <c>Multiple CPEs, Multiple provisioning domains</c>

        <c>internal hosts or all CPEs (rtr1 and rtr2)</c>

        <c>CPEs (rtr1 and rtr2)</c>

        <c>Multi-homed enterprise, Single provisioning domain</c>

        <c>internal hosts or all CPEs (rtr1 and rtr2)</c>

        <c>CPEs (rtr1 and rtr2)</c>
      </texttable>

      <t>These deployment schemes are further discussed in the following
      sub-sections.</t>

      <section anchor="dcpe" title="Residential CPE">
        <t><xref target="dotsrcpe"></xref> depicts DOTS signaling sessions
        that are required to be established between a DOTS client (C) and DOTS
        servers (S1, S2) for a multi-homed CPE.</t>

        <t>The DOTS client MUST resolve the DOTS server's name provided by a
        provisioning domain using the DNS servers learned from the same
        provisioning domain. The DOTS client MUST use the source address
        selection algorithm defined in <xref target="RFC6724"></xref> to
        select the candidate source addresses to contact each of these DOTS
        servers. DOTS signaling sessions must be established and maintained
        with each of the DOTS servers because the mitigation scope of these
        servers is restricted. The DOTS client SHOULD use the certificate
        provisioned by a provisioning domain to authenticate itself to the
        DOTS server provided by the same provisioning domain. When conveying a
        mitigation request to protect the attack target(s), the DOTS client
        among the DOTS servers available MUST select a DOTS server whose
        network has assigned the prefixes from which target prefixes and
        target IP addresses are derived. For example, mitigation request to
        protect target resources bound to a PA IP address/prefix cannot be
        honored by an provisioning domain other than the one that owns those
        addresses/prefixes. Consequently, Typically, if a CPE detects a DDoS
        attack on all its network attachments, it must contact both DOTS
        servers for mitigation. Nevertheless, if the DDoS attack is received
        from one single network, then only the DOTS server of that network
        must be contacted.</t>

        <t>The DOTS client MUST be able to associate a DOTS server with each
        provisioning domain. For example, if the DOTS client is provisioned
        with S1 using DHCP when attaching to a first network and with S2 using
        Protocol Configuration Option (PCO) when attaching to a second
        network, the DOTS client must record the interface from which a DOTS
        server was provisioned. DOTS signaling session to a given DOTS server
        must be established using the interface from which the DOTS server was
        provisioned.</t>

        <figure title="DOTS associations for a multihomed residential CPE" anchor="dotsrcpe"><artwork><![CDATA[
                          +--+
               -----------|S1|
              /           +--+
             /            
            /
      +---+/  
      | C |
      +---+\  
            \ 
             \
              \           +--+
               -----------|S2|
                          +--+
]]></artwork></figure>
          
      </section>

      <section title="Multi-homed Enterprise: Single CPE, Multiple Upstream ISPs">
        <t><xref target="dotsmcgms"></xref> illustrates a first set of DOTS
        associations that can be established with a DOTS gateway is enabled in
        the context of this scenario. This deployment is characterized as
        follows:</t>

        <t><list style="symbols">
            <t>One of more DOTS clients are enabled in hosts located in the
            internal network.</t>

            <t>A DOTS getaway is enabled to aggregate/relay the requests to
            upstream DOTS servers.</t>
          </list>When PA addresses/prefixes are in used, the same
        considerations discussed in <xref target="dcpe"></xref> are to be
        followed by the DOTS gateway to contact its DOTS server(s). The DOTS
        gateways can be reachable from DOTS client using a unicast or anycast
        address.</t>

        <t>Nevertheless, when PI addresses/prefixes are assigned, the DOTS
        gateway MUST sent the same request to all its DOTS servers.</t>

        <figure title="Multiple DOTS Clients, Single DOTS Gateway, Multiple DOTS Servers" anchor="dotsmcgms"><artwork><![CDATA[
                               +--+
                    -----------|S1|
    +---+          /           +--+
    | C1|----+    /            
    +---+    |   /
+---+      +-+-+/  
| C3|------| G |
+---+      +-+-+\  
    +---+    |   \ 
    | C2|----+    \
    +---+          \           +--+
                    -----------|S2|
                               +--+
]]></artwork></figure>

        <t>An alternate deployment model is depicted in <xref
        target="mcms"></xref>. This deployment assumes that:</t>

        <t><list style="symbols">
            <t>One of more DOTS clients are enabled in hosts located in the
            internal network.</t>

            <t>These DOTS clients communicate directly with upstream DOTS
            servers.</t>
          </list>If PI addresses/prefixes are in use, the DOTS client can send
        the mitigation request for all its PI addresses/prefixes to any one of
        the DOTS servers. The use of anycast addresses is NOT RECOMMENDED.</t>

        <t>If PA addresses/prefxies are used, the same considerations
        discussed in <xref target="dcpe"></xref> are to be followed by the
        DOTS clients. Because DOTS clients are not located on the CPE and
        multiple addreses/prefixes may not be assigned to the DOTS client
        (IPv4 context, typically), some complications arise to steer the
        traffic to the appropriate DOTS server using the appropriate source IP
        address. These complications discussed in <xref
        target="RFC4116"></xref> are not specific to DOTS .</t>
   
<figure title="Multiple DOTS Clients, Multiple DOTS Servers" anchor="mcms"><artwork><![CDATA[

          +--+         
 +--------|C1|--------+                
 |        +--+        |      
+--+      +--+      +--+
|S2|------|C3|------|S1|
+--+      +--+      +--+
 |        +--+        |     
 +--------|C2|--------+     
          +--+           
]]></artwork></figure>

        <t>Another deployment approach is to enable many DOTS clients; each of
        them responsible to handle communication with a specific DOTS server
        (see <xref target="scms"></xref>). Each DOTS client is provided with
        policies (e.g., prefix filter) that will trigger DOTS communications
        with the DOTS servers. The CPE MUST select the appropriate source IP
        address when forwarding DOTS messages received from an internal DOTS
        client. If anycast addresses are used to reach DOTS servers, the CPE
        may not be able to select the appropriate provisioning domain to which
        the mitigation request should be forwarded. As a consequence, the
        request may not be forwarded to the appropriate DOTS server.</t>

  <figure title="Single Homed DOTS Clients" anchor="scms"><artwork><![CDATA[

          +--+         
 +--------|C1|                 
 |        +--+  
+--+      +--+      +--+
|S2|      |C2|------|S1|
+--+      +--+      +--+

]]></artwork></figure>
          
      </section>

      <section title="Multi-homed Enterprise: Multiple CPEs, Multiple Upstream ISPs">
        <t>One specific problem for this scenario is to select the appropriate
        exit router when contacting a given DOTS server.</t>

        <t>An alternative deployment scheme is shown in <xref
        target="mcmgms"></xref>:<list style="symbols">
            <t>DOTS clients are enabled in hosts located in the internal
            network.</t>

            <t>A DOTS gateway is enabled in each CPE (rtr1, rtr2).</t>

            <t>Each of these DOTS gateways communicate with the DOTS server of
            the provisioning domain.</t>
          </list></t>

        <t>When PI addresses/prefixes are used, DOTS clients can contact any
        of the DOTS gateways to send a DOTS message. DOTS gateway will then
        relay the request to the DOTS server. Note that the use of anycast
        addresses is NOT RECOMMENDED to establish DOTS signaling sessions
        between DOTS client and DOTS gateways.</t>

        <t>When PA addresses/prefixes are used, but no filter rules are
        provided to DOTS clients, these later MUST contact all DOTS gateways
        simultaneously to send a DOTS message. Upon receipt of a request by a
        DOTS gateway, it MUST check whether the request is to be forwarded
        upstream or be rejected.</t>

        <t>When PA addresses/prefixes are used, but specific filter rules are
        provided to DOTS clients using some means that are out of scope, these
        later MUST select the appropriate DOTS gateway to be contacted. The
        use of anycast is NOT RECOMMENDED to reach DOTS gateways.</t>

       <figure title="SMultiple DOTS Clients, Multiple DOTS Gateways, Multiple DOTS Servers" anchor="mcmgms"><artwork><![CDATA[
                         +---+         
            +------------| C1|----+                
            |            +---+    |      
+--+      +-+-+      +---+      +-+-+      +--+  
|S2|------|G2 |------| C3|------|G1 |------|S1|
+--+      +-+-+      +---+      +-+-+      +--+ 
            |            +---+    |     
            +------------| C2|----+     
                         +---+           
]]></artwork></figure>
          
      </section>

      <section title="Multi-homed Enterprise: Single ISP">
        <t>The key difference of this scenario compared to the aforementioned
        scenarios is that multi-homing is provided by the same ISP.
        Concretely, that ISP can decided to provision the enterprise network
        with:</t>

        <t><list style="numbers">
            <t>The same DOTS server for all network attachments.</t>

            <t>Distinct DOTS servers for each network attachment. These DOTS
            servers needs to coordinate when a mitigation action is received
            from the enterprise network.</t>
          </list></t>

        <t>In both cases, DOTS agents enabled within the enterprise network
        may decide to select one or all network attachments to place DOTS
        mitigation requests.</t>
      </section>
    </section>
  </back>
</rfc>

